# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version  (ie 5.5.0)'
        required: true
      beta:
        description: 'Is Beta Release? (0 - Stable, 1 - Beta)'
        default: '1'
        required: true
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Update version in pom.xml (Release only)
      run: mvn -B versions:set -DnewVersion=${{ github.event.inputs.version }} -DgenerateBackupPoms=false
    - name: Create Release Branch
      run: |
        git checkout -b release/${{ github.event.inputs.version }}
        git config user.name github-actions
        git config user.email noreply@github.com
        git add *pom.xml
        git commit -m "Release ${{ github.event.inputs.version }}"
        git push origin release/${{ github.event.inputs.version }}
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - run: mkdir artifacts
    - run: cp status-api/target/*.jar artifacts
    - run: cp spring-status/target/*.jar artifacts
    - uses: actions/upload-artifact@v2
      with:
       name: Artifacts
       path: artifacts/*
      #    - name: Publish to GitHub Packages Apache Maven
      #      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      #      env:
      #       GITHUB_TOKEN: ${{ github.token }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: ${{ github.event.inputs.beta }} == '1'
    - name: Upload Release Artifacts
      id: upload-release-artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: artifacts/*.jar
#        asset_name: my-artifact.zip
        asset_content_type: application/zip